//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AES.ApplicationSvc.Tests.ApplicationSvcTestClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ApplicationSvcTestClient.IApplicationSvc")]
    public interface IApplicationSvc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/CancelApplication", ReplyAction="http://tempuri.org/IApplicationSvc/CancelApplicationResponse")]
        bool CancelApplication(AES.ApplicationSvc.Contracts.ApplicationInfoContract app);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/CancelApplication", ReplyAction="http://tempuri.org/IApplicationSvc/CancelApplicationResponse")]
        System.Threading.Tasks.Task<bool> CancelApplicationAsync(AES.ApplicationSvc.Contracts.ApplicationInfoContract app);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/GetApplicantsAwaitingCalls", ReplyAction="http://tempuri.org/IApplicationSvc/GetApplicantsAwaitingCallsResponse")]
        AES.Shared.Contracts.ApplicantInfoContract[] GetApplicantsAwaitingCalls(System.DateTime currentDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/GetApplicantsAwaitingCalls", ReplyAction="http://tempuri.org/IApplicationSvc/GetApplicantsAwaitingCallsResponse")]
        System.Threading.Tasks.Task<AES.Shared.Contracts.ApplicantInfoContract[]> GetApplicantsAwaitingCallsAsync(System.DateTime currentDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/GetApplicantsAwaitingInterview", ReplyAction="http://tempuri.org/IApplicationSvc/GetApplicantsAwaitingInterviewResponse")]
        AES.Shared.Contracts.ApplicantInfoContract[] GetApplicantsAwaitingInterview(int storeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/GetApplicantsAwaitingInterview", ReplyAction="http://tempuri.org/IApplicationSvc/GetApplicantsAwaitingInterviewResponse")]
        System.Threading.Tasks.Task<AES.Shared.Contracts.ApplicantInfoContract[]> GetApplicantsAwaitingInterviewAsync(int storeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/GetApplication", ReplyAction="http://tempuri.org/IApplicationSvc/GetApplicationResponse")]
        AES.ApplicationSvc.Contracts.ApplicationInfoContract GetApplication(int userID, AES.Shared.AppStatus userAppStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/GetApplication", ReplyAction="http://tempuri.org/IApplicationSvc/GetApplicationResponse")]
        System.Threading.Tasks.Task<AES.ApplicationSvc.Contracts.ApplicationInfoContract> GetApplicationAsync(int userID, AES.Shared.AppStatus userAppStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/GetInterviewApplication", ReplyAction="http://tempuri.org/IApplicationSvc/GetInterviewApplicationResponse")]
        AES.ApplicationSvc.Contracts.ApplicationInfoContract GetInterviewApplication(AES.Shared.Contracts.UserInfoContract user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/GetInterviewApplication", ReplyAction="http://tempuri.org/IApplicationSvc/GetInterviewApplicationResponse")]
        System.Threading.Tasks.Task<AES.ApplicationSvc.Contracts.ApplicationInfoContract> GetInterviewApplicationAsync(AES.Shared.Contracts.UserInfoContract user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/SavePartialApplication", ReplyAction="http://tempuri.org/IApplicationSvc/SavePartialApplicationResponse")]
        AES.Shared.AppSvcResponse SavePartialApplication(AES.ApplicationSvc.Contracts.ApplicationInfoContract app);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/SavePartialApplication", ReplyAction="http://tempuri.org/IApplicationSvc/SavePartialApplicationResponse")]
        System.Threading.Tasks.Task<AES.Shared.AppSvcResponse> SavePartialApplicationAsync(AES.ApplicationSvc.Contracts.ApplicationInfoContract app);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/SetApplicationStatus", ReplyAction="http://tempuri.org/IApplicationSvc/SetApplicationStatusResponse")]
        bool SetApplicationStatus(AES.ApplicationSvc.Contracts.ApplicationInfoContract app, AES.Shared.AppStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/SetApplicationStatus", ReplyAction="http://tempuri.org/IApplicationSvc/SetApplicationStatusResponse")]
        System.Threading.Tasks.Task<bool> SetApplicationStatusAsync(AES.ApplicationSvc.Contracts.ApplicationInfoContract app, AES.Shared.AppStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/CallApplicant", ReplyAction="http://tempuri.org/IApplicationSvc/CallApplicantResponse")]
        bool CallApplicant(int applicantID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/CallApplicant", ReplyAction="http://tempuri.org/IApplicationSvc/CallApplicantResponse")]
        System.Threading.Tasks.Task<bool> CallApplicantAsync(int applicantID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/ApplicantDidNotAnswer", ReplyAction="http://tempuri.org/IApplicationSvc/ApplicantDidNotAnswerResponse")]
        bool ApplicantDidNotAnswer(int applicantID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/ApplicantDidNotAnswer", ReplyAction="http://tempuri.org/IApplicationSvc/ApplicantDidNotAnswerResponse")]
        System.Threading.Tasks.Task<bool> ApplicantDidNotAnswerAsync(int applicantID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/SavePhoneInterview", ReplyAction="http://tempuri.org/IApplicationSvc/SavePhoneInterviewResponse")]
        bool SavePhoneInterview(int applicantID, string notes, bool approved);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/SavePhoneInterview", ReplyAction="http://tempuri.org/IApplicationSvc/SavePhoneInterviewResponse")]
        System.Threading.Tasks.Task<bool> SavePhoneInterviewAsync(int applicantID, string notes, bool approved);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/SubmitApplication", ReplyAction="http://tempuri.org/IApplicationSvc/SubmitApplicationResponse")]
        bool SubmitApplication(AES.Shared.Contracts.ApplicantInfoContract user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationSvc/SubmitApplication", ReplyAction="http://tempuri.org/IApplicationSvc/SubmitApplicationResponse")]
        System.Threading.Tasks.Task<bool> SubmitApplicationAsync(AES.Shared.Contracts.ApplicantInfoContract user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IApplicationSvcChannel : AES.ApplicationSvc.Tests.ApplicationSvcTestClient.IApplicationSvc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ApplicationSvcClient : System.ServiceModel.ClientBase<AES.ApplicationSvc.Tests.ApplicationSvcTestClient.IApplicationSvc>, AES.ApplicationSvc.Tests.ApplicationSvcTestClient.IApplicationSvc {
        
        public ApplicationSvcClient() {
        }
        
        public ApplicationSvcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ApplicationSvcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationSvcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CancelApplication(AES.ApplicationSvc.Contracts.ApplicationInfoContract app) {
            return base.Channel.CancelApplication(app);
        }
        
        public System.Threading.Tasks.Task<bool> CancelApplicationAsync(AES.ApplicationSvc.Contracts.ApplicationInfoContract app) {
            return base.Channel.CancelApplicationAsync(app);
        }
        
        public AES.Shared.Contracts.ApplicantInfoContract[] GetApplicantsAwaitingCalls(System.DateTime currentDateTime) {
            return base.Channel.GetApplicantsAwaitingCalls(currentDateTime);
        }
        
        public System.Threading.Tasks.Task<AES.Shared.Contracts.ApplicantInfoContract[]> GetApplicantsAwaitingCallsAsync(System.DateTime currentDateTime) {
            return base.Channel.GetApplicantsAwaitingCallsAsync(currentDateTime);
        }
        
        public AES.Shared.Contracts.ApplicantInfoContract[] GetApplicantsAwaitingInterview(int storeID) {
            return base.Channel.GetApplicantsAwaitingInterview(storeID);
        }
        
        public System.Threading.Tasks.Task<AES.Shared.Contracts.ApplicantInfoContract[]> GetApplicantsAwaitingInterviewAsync(int storeID) {
            return base.Channel.GetApplicantsAwaitingInterviewAsync(storeID);
        }
        
        public AES.ApplicationSvc.Contracts.ApplicationInfoContract GetApplication(int userID, AES.Shared.AppStatus userAppStatus) {
            return base.Channel.GetApplication(userID, userAppStatus);
        }
        
        public System.Threading.Tasks.Task<AES.ApplicationSvc.Contracts.ApplicationInfoContract> GetApplicationAsync(int userID, AES.Shared.AppStatus userAppStatus) {
            return base.Channel.GetApplicationAsync(userID, userAppStatus);
        }
        
        public AES.ApplicationSvc.Contracts.ApplicationInfoContract GetInterviewApplication(AES.Shared.Contracts.UserInfoContract user) {
            return base.Channel.GetInterviewApplication(user);
        }
        
        public System.Threading.Tasks.Task<AES.ApplicationSvc.Contracts.ApplicationInfoContract> GetInterviewApplicationAsync(AES.Shared.Contracts.UserInfoContract user) {
            return base.Channel.GetInterviewApplicationAsync(user);
        }
        
        public AES.Shared.AppSvcResponse SavePartialApplication(AES.ApplicationSvc.Contracts.ApplicationInfoContract app) {
            return base.Channel.SavePartialApplication(app);
        }
        
        public System.Threading.Tasks.Task<AES.Shared.AppSvcResponse> SavePartialApplicationAsync(AES.ApplicationSvc.Contracts.ApplicationInfoContract app) {
            return base.Channel.SavePartialApplicationAsync(app);
        }
        
        public bool SetApplicationStatus(AES.ApplicationSvc.Contracts.ApplicationInfoContract app, AES.Shared.AppStatus status) {
            return base.Channel.SetApplicationStatus(app, status);
        }
        
        public System.Threading.Tasks.Task<bool> SetApplicationStatusAsync(AES.ApplicationSvc.Contracts.ApplicationInfoContract app, AES.Shared.AppStatus status) {
            return base.Channel.SetApplicationStatusAsync(app, status);
        }
        
        public bool CallApplicant(int applicantID) {
            return base.Channel.CallApplicant(applicantID);
        }
        
        public System.Threading.Tasks.Task<bool> CallApplicantAsync(int applicantID) {
            return base.Channel.CallApplicantAsync(applicantID);
        }
        
        public bool ApplicantDidNotAnswer(int applicantID) {
            return base.Channel.ApplicantDidNotAnswer(applicantID);
        }
        
        public System.Threading.Tasks.Task<bool> ApplicantDidNotAnswerAsync(int applicantID) {
            return base.Channel.ApplicantDidNotAnswerAsync(applicantID);
        }
        
        public bool SavePhoneInterview(int applicantID, string notes, bool approved) {
            return base.Channel.SavePhoneInterview(applicantID, notes, approved);
        }
        
        public System.Threading.Tasks.Task<bool> SavePhoneInterviewAsync(int applicantID, string notes, bool approved) {
            return base.Channel.SavePhoneInterviewAsync(applicantID, notes, approved);
        }
        
        public bool SubmitApplication(AES.Shared.Contracts.ApplicantInfoContract user) {
            return base.Channel.SubmitApplication(user);
        }
        
        public System.Threading.Tasks.Task<bool> SubmitApplicationAsync(AES.Shared.Contracts.ApplicantInfoContract user) {
            return base.Channel.SubmitApplicationAsync(user);
        }
    }
}

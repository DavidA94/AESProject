//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AES.Opening.Tests.OpeningSvcTestClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OpeningSvcTestClient.IOpeningSvc")]
    public interface IOpeningSvc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/GetAllOpenings", ReplyAction="http://tempuri.org/IOpeningSvc/GetAllOpeningsResponse")]
        AES.OpeningsSvc.Contracts.JobOpeningContract[] GetAllOpenings(int StoreID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/GetAllOpenings", ReplyAction="http://tempuri.org/IOpeningSvc/GetAllOpeningsResponse")]
        System.Threading.Tasks.Task<AES.OpeningsSvc.Contracts.JobOpeningContract[]> GetAllOpeningsAsync(int StoreID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/GetApprovedOpenings", ReplyAction="http://tempuri.org/IOpeningSvc/GetApprovedOpeningsResponse")]
        AES.OpeningsSvc.Contracts.JobOpeningContract[] GetApprovedOpenings(int StoreID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/GetApprovedOpenings", ReplyAction="http://tempuri.org/IOpeningSvc/GetApprovedOpeningsResponse")]
        System.Threading.Tasks.Task<AES.OpeningsSvc.Contracts.JobOpeningContract[]> GetApprovedOpeningsAsync(int StoreID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/RequestOpenings", ReplyAction="http://tempuri.org/IOpeningSvc/RequestOpeningsResponse")]
        bool RequestOpenings(int StoreID, AES.OpeningsSvc.Contracts.JobOpeningContract opening, int number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/RequestOpenings", ReplyAction="http://tempuri.org/IOpeningSvc/RequestOpeningsResponse")]
        System.Threading.Tasks.Task<bool> RequestOpeningsAsync(int StoreID, AES.OpeningsSvc.Contracts.JobOpeningContract opening, int number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/GetPendingOpenings", ReplyAction="http://tempuri.org/IOpeningSvc/GetPendingOpeningsResponse")]
        AES.OpeningsSvc.Contracts.JobOpeningContract[] GetPendingOpenings(int StoreID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/GetPendingOpenings", ReplyAction="http://tempuri.org/IOpeningSvc/GetPendingOpeningsResponse")]
        System.Threading.Tasks.Task<AES.OpeningsSvc.Contracts.JobOpeningContract[]> GetPendingOpeningsAsync(int StoreID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/GetRejectedOpenings", ReplyAction="http://tempuri.org/IOpeningSvc/GetRejectedOpeningsResponse")]
        AES.OpeningsSvc.Contracts.JobOpeningContract[] GetRejectedOpenings(int StoreID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/GetRejectedOpenings", ReplyAction="http://tempuri.org/IOpeningSvc/GetRejectedOpeningsResponse")]
        System.Threading.Tasks.Task<AES.OpeningsSvc.Contracts.JobOpeningContract[]> GetRejectedOpeningsAsync(int StoreID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/ApproveOpening", ReplyAction="http://tempuri.org/IOpeningSvc/ApproveOpeningResponse")]
        bool ApproveOpening(AES.OpeningsSvc.Contracts.JobOpeningContract opening, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/ApproveOpening", ReplyAction="http://tempuri.org/IOpeningSvc/ApproveOpeningResponse")]
        System.Threading.Tasks.Task<bool> ApproveOpeningAsync(AES.OpeningsSvc.Contracts.JobOpeningContract opening, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/RejectOpening", ReplyAction="http://tempuri.org/IOpeningSvc/RejectOpeningResponse")]
        bool RejectOpening(AES.OpeningsSvc.Contracts.JobOpeningContract opening, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpeningSvc/RejectOpening", ReplyAction="http://tempuri.org/IOpeningSvc/RejectOpeningResponse")]
        System.Threading.Tasks.Task<bool> RejectOpeningAsync(AES.OpeningsSvc.Contracts.JobOpeningContract opening, string notes);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOpeningSvcChannel : AES.Opening.Tests.OpeningSvcTestClient.IOpeningSvc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OpeningSvcClient : System.ServiceModel.ClientBase<AES.Opening.Tests.OpeningSvcTestClient.IOpeningSvc>, AES.Opening.Tests.OpeningSvcTestClient.IOpeningSvc {
        
        public OpeningSvcClient() {
        }
        
        public OpeningSvcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OpeningSvcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OpeningSvcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OpeningSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AES.OpeningsSvc.Contracts.JobOpeningContract[] GetAllOpenings(int StoreID) {
            return base.Channel.GetAllOpenings(StoreID);
        }
        
        public System.Threading.Tasks.Task<AES.OpeningsSvc.Contracts.JobOpeningContract[]> GetAllOpeningsAsync(int StoreID) {
            return base.Channel.GetAllOpeningsAsync(StoreID);
        }
        
        public AES.OpeningsSvc.Contracts.JobOpeningContract[] GetApprovedOpenings(int StoreID) {
            return base.Channel.GetApprovedOpenings(StoreID);
        }
        
        public System.Threading.Tasks.Task<AES.OpeningsSvc.Contracts.JobOpeningContract[]> GetApprovedOpeningsAsync(int StoreID) {
            return base.Channel.GetApprovedOpeningsAsync(StoreID);
        }
        
        public bool RequestOpenings(int StoreID, AES.OpeningsSvc.Contracts.JobOpeningContract opening, int number) {
            return base.Channel.RequestOpenings(StoreID, opening, number);
        }
        
        public System.Threading.Tasks.Task<bool> RequestOpeningsAsync(int StoreID, AES.OpeningsSvc.Contracts.JobOpeningContract opening, int number) {
            return base.Channel.RequestOpeningsAsync(StoreID, opening, number);
        }
        
        public AES.OpeningsSvc.Contracts.JobOpeningContract[] GetPendingOpenings(int StoreID) {
            return base.Channel.GetPendingOpenings(StoreID);
        }
        
        public System.Threading.Tasks.Task<AES.OpeningsSvc.Contracts.JobOpeningContract[]> GetPendingOpeningsAsync(int StoreID) {
            return base.Channel.GetPendingOpeningsAsync(StoreID);
        }
        
        public AES.OpeningsSvc.Contracts.JobOpeningContract[] GetRejectedOpenings(int StoreID) {
            return base.Channel.GetRejectedOpenings(StoreID);
        }
        
        public System.Threading.Tasks.Task<AES.OpeningsSvc.Contracts.JobOpeningContract[]> GetRejectedOpeningsAsync(int StoreID) {
            return base.Channel.GetRejectedOpeningsAsync(StoreID);
        }
        
        public bool ApproveOpening(AES.OpeningsSvc.Contracts.JobOpeningContract opening, string notes) {
            return base.Channel.ApproveOpening(opening, notes);
        }
        
        public System.Threading.Tasks.Task<bool> ApproveOpeningAsync(AES.OpeningsSvc.Contracts.JobOpeningContract opening, string notes) {
            return base.Channel.ApproveOpeningAsync(opening, notes);
        }
        
        public bool RejectOpening(AES.OpeningsSvc.Contracts.JobOpeningContract opening, string notes) {
            return base.Channel.RejectOpening(opening, notes);
        }
        
        public System.Threading.Tasks.Task<bool> RejectOpeningAsync(AES.OpeningsSvc.Contracts.JobOpeningContract opening, string notes) {
            return base.Channel.RejectOpeningAsync(opening, notes);
        }
    }
}
